
# alerts.py
import threading
import time
import logging
from datetime import datetime, timedelta
from typing import List, Optional
from telebot import types
import database
import users
import market

logger = logging.getLogger(__name__)


def calculate_speed(records: List[dict], price_field: str = "buy") -> Optional[float]:
    if not records or len(records) < 2:
        return None
    first = records[0]
    last = records[-1]
    price_delta = last[price_field] - first[price_field]
    time_delta_minutes = (last['timestamp'] - first['timestamp']) / 60.0
    if time_delta_minutes < 0.1:
        return None
    speed = price_delta / time_delta_minutes
    return round(speed, 6)


def get_trend(records: List[dict], price_field: str = "buy") -> str:
    if not records or len(records) < 2:
        return "stable"
    first_price = records[0][price_field]
    last_price = records[-1][price_field]
    if last_price > first_price:
        return "up"
    elif last_price < first_price:
        return "down"
    else:
        return "stable"


def schedule_alert(alert_id: int, bot):
    try:
        alert = database.get_alert_by_id(alert_id)
        if not alert:
            return

        alert_time = datetime.fromisoformat(alert['alert_time'])
        now = datetime.now()
        sleep_s = (alert_time - now).total_seconds()
        if sleep_s > 0:
            time.sleep(sleep_s)

        current = database.get_latest_market(alert['resource'])
        if not current:
            try:
                bot.send_message(alert['user_id'], f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª—å: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {alert['resource']}.")
            except Exception:
                pass
            database.update_alert_status(alert_id, 'error')
            return

        current_price_adj, _ = users.adjust_prices_for_user(alert['user_id'], current['buy'], current['sell'])

        reached = False
        if alert['direction'] == 'down' and current_price_adj <= alert['target_price']:
            reached = True
        if alert['direction'] == 'up' and current_price_adj >= alert['target_price']:
            reached = True

        if reached:
            try:
                bot.send_message(alert['user_id'], f"üîî **–¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª!** üéØ\n{alert['resource']} –¥–æ—Å—Ç–∏–≥–ª–∞ {alert['target_price']:.2f}üí∞\n–¢–µ–∫—É—â–∞—è: {current_price_adj:.2f}üí∞")
            except Exception:
                pass
            database.update_alert_status(alert_id, 'completed')
            if alert.get('chat_id') and alert['chat_id'] != alert['user_id']:
                try:
                    group_users = database.get_group_users(alert['chat_id'])
                    mentions = ' '.join([f"@{u['username']}" for u in group_users if u['username']])
                    alert_msg = f"üîî **–¢–∞–π–º–µ—Ä @{alert['user_id']} —Å—Ä–∞–±–æ—Ç–∞–ª!**\n{alert['resource']} –¥–æ—Å—Ç–∏–≥–ª–∞ {alert['target_price']:.2f}üí∞ (—Ç–µ–∫—É—â–∞—è: {current_price_adj:.2f}üí∞)\n{mentions}" if mentions else f"üîî –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª: {alert['resource']} {alert['target_price']:.2f}üí∞"
                    bot.send_message(alert['chat_id'], alert_msg, parse_mode='Markdown')
                except Exception:
                    bot.send_message(alert['chat_id'], f"üîî –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª: {alert['resource']} {alert['target_price']:.2f}üí∞")
        else:
            try:
                bot.send_message(alert['user_id'], f"‚è∞ **–¢–∞–π–º–µ—Ä –∏—Å—Ç—ë–∫**\n–¶–µ–ª—å ({alert['target_price']:.2f}üí∞) –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞. –¢–µ–∫—É—â–∞—è: {current_price_adj:.2f}üí∞")
            except Exception:
                pass
            database.update_alert_status(alert_id, 'expired')

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ schedule_alert")
        try:
            database.update_alert_status(alert_id, 'error')
        except Exception:
            pass


def update_dynamic_timers_once(bot):
    try:
        active_alerts = database.get_active_alerts()
        now = datetime.now()
        for alert in active_alerts:
            try:
                records = database.get_recent_market(alert['resource'], minutes=15)
                if not records or len(records) < 2:
                    continue

                latest = database.get_latest_market(alert['resource'])
                if not latest:
                    continue

                created_ts = datetime.fromisoformat(alert['created_at']).timestamp() if alert.get('created_at') else 0
                if latest['timestamp'] <= created_ts:
                    continue

                bonus = users.get_user_bonus(alert['user_id'])
                current_adj_price, _ = users.adjust_prices_for_user(alert['user_id'], latest['buy'], latest['sell'])
                speed_raw = calculate_speed(records, "buy")
                if speed_raw is None:
                    continue

                adj_speed = speed_raw / (1 + bonus) if isinstance(bonus, float) else speed_raw
                if adj_speed is None or adj_speed == 0:
                    continue

                current_trend = get_trend(records, "buy")
                if (alert['direction'] == "down" and current_trend == "up") or (alert['direction'] == "up" and current_trend == "down"):
                    try:
                        bot.send_message(alert['user_id'], f"‚ö†Ô∏è **–¢—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è** üìä\n{alert['resource']}: —Ç–µ–ø–µ—Ä—å {current_trend}. –ê–ª–µ—Ä—Ç—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                    except Exception:
                        pass
                    database.update_alert_status(alert['id'], 'trend_changed')
                    continue

                # Fixed logic: direction based on target vs current at creation, but update if already reached
                if (alert['direction'] == "down" and current_adj_price <= alert['target_price']) or (alert['direction'] == "up" and current_adj_price >= alert['target_price']):
                    try:
                        bot.send_message(alert['user_id'], f"üîî **–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!** üéØ\n{alert['resource']}: {alert['target_price']:.2f}üí∞ (—Ç–µ–∫—É—â–∞—è: {current_adj_price:.2f}üí∞)")
                    except Exception:
                        pass
                    database.update_alert_status(alert['id'], 'completed')
                    continue

                # Only update if speed in correct direction
                price_diff = abs(alert['target_price'] - current_adj_price)
                if price_diff == 0:
                    continue
                expected_speed_dir = -1 if alert['direction'] == "down" else 1
                if (adj_speed * expected_speed_dir) <= 0:
                    continue  # Wrong direction

                time_minutes = price_diff / abs(adj_speed)
                new_alert_time = datetime.now() + timedelta(minutes=time_minutes)

                database.update_alert_fields(alert['id'], {
                    'alert_time': new_alert_time.isoformat(),
                    'speed': adj_speed,
                    'current_price': current_adj_price
                })

                try:
                    old = datetime.fromisoformat(alert['alert_time']) if alert.get('alert_time') else None
                    if old:
                        diff_min = abs((new_alert_time - old).total_seconds() / 60.0)
                        if diff_min > 5:
                            bot.send_message(alert['user_id'], f"üîÑ **–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω** ‚è±Ô∏è\n{alert['resource']}: –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è {new_alert_time.strftime('%H:%M:%S')}")
                except Exception:
                    pass

            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞ {alert.get('id')}: {e}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ update_dynamic_timers_once")


def cleanup_expired_alerts_loop():
    while True:
        try:
            now = datetime.now()
            active = database.get_active_alerts()
            expired_ids = []
            for a in active:
                try:
                    if not a.get('alert_time'):
                        continue
                    at = datetime.fromisoformat(a['alert_time'])
                    if at < (now - timedelta(hours=1)):
                        expired_ids.append(a['id'])
                except Exception:
                    continue
            for aid in expired_ids:
                database.update_alert_status(aid, 'cleanup_expired')
                logger.info(f"–û—á–∏—Å—Ç–∫–∞: –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç {aid} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω)")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ cleanup_expired_alerts_loop")
        time.sleep(600)


def stale_db_reminder_loop(bot):
    while True:
        try:
            global_ts = database.get_global_latest_timestamp()
            now_ts = int(time.time())
            delta = None if not global_ts else now_ts - global_ts
            if delta is not None and delta < 15 * 60:
                time.sleep(60)
                continue

            users_list = database.get_users_with_notifications_enabled()
            for u in users_list:
                uid = u["id"]
                interval = int(u.get("notify_interval", 15))
                last = int(u.get("last_reminder", 0))
                if now_ts - last >= interval * 60:
                    try:
                        bot.send_message(uid, "‚ö†Ô∏è **–ë–î —É—Å—Ç–∞—Ä–µ–ª–∞!** üìâ\n–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å >15 –º–∏–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä—ã–Ω–∫–∞ üé™.\n/push ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                    except Exception:
                        pass
                    database.set_user_last_reminder(uid, now_ts)

            chats = database.get_chats_with_notifications_enabled()
            for c in chats:
                chat_id = c["chat_id"]
                interval = int(c.get("notify_interval", 15))
                last = int(c.get("last_reminder", 0))
                if now_ts - last >= interval * 60:
                    try:
                        bot.send_message(chat_id, "‚ö†Ô∏è **–ë–î —É—Å—Ç–∞—Ä–µ–ª–∞!** üìâ\n–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å >15 –º–∏–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ä–≤–∞—Ä–¥ —Ä—ã–Ω–∫–∞.")
                    except Exception:
                        pass
                    database.set_chat_last_reminder(chat_id, now_ts)

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ stale_db_reminder_loop")
        time.sleep(60)  # Check every minute, send if interval passed


def update_dynamic_timers_loop(bot):
    while True:
        try:
            update_dynamic_timers_once(bot)
        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ update_dynamic_timers_loop")
        time.sleep(60)


def check_profit_alerts(bot):
    while True:
        try:
            chats = database.get_chats_with_profit_alerts()
            for chat in chats:
                chat_id = chat['chat_id']
                alerts_list = database.get_chat_profit_alerts(chat_id)
                latest = database.get_latest_market_all()
                for alert in alerts_list:
                    resource = alert['resource']
                    threshold = alert['threshold_price']
                    min_qty = alert['min_quantity']
                    current = next((r for r in latest if r['resource'] == resource), None)
                    if current and current['buy'] <= threshold and current['quantity'] >= min_qty:
                        try:
                            group_users = database.get_group_users(chat_id)
                            mentions = ' '.join([f"@{u['username']}" for u in group_users if u['username']])
                            alert_msg = f"üõí **–í—Ä–µ–º—è –ø–æ–∫—É–ø–∞—Ç—å!** üìâ\n{resource}: {current['buy']:.2f}üí∞ (‚â•{min_qty:,} —à—Ç.)\n{mentions}"
                            bot.send_message(chat_id, alert_msg, parse_mode='Markdown')
                            database.deactivate_profit_alert(chat_id, resource)
                        except Exception:
                            pass
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ check_profit_alerts")
        time.sleep(300)


def start_background_tasks(bot):
    threading.Thread(target=cleanup_expired_alerts_loop, daemon=True).start()
    threading.Thread(target=update_dynamic_timers_loop, args=(bot,), daemon=True).start()
    threading.Thread(target=stale_db_reminder_loop, args=(bot,), daemon=True).start()
    threading.Thread(target=check_profit_alerts, args=(bot,), daemon=True).start()


def cmd_timer_handler(bot, message):
    try:
        parts = message.text.split()[1:]
        if len(parts) != 2:
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("üìâ –ü–∞–¥–µ–Ω–∏–µ (down)", callback_data="timer_down"))
            markup.add(types.InlineKeyboardButton("üìà –†–æ—Å—Ç (up)", callback_data="timer_up"))
            res = parts[0].capitalize() if parts else ""
            target = parts[1] if len(parts)>1 else ""
            bot.reply_to(message, f"üîî **–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä** ‚è±Ô∏è\n/timer {res} {target}\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", parse_mode='Markdown', reply_markup=markup)
            return

        resource = parts[0].capitalize()
        try:
            target_price = float(parts[1].replace(',', '.'))
            if target_price <= 0:
                bot.reply_to(message, "‚ùå –¶–µ–Ω–∞ > 0.")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä: 8.50")
            return

        latest = database.get_latest_market(resource)
        if not latest:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {resource}. –ü—Ä–∏—à–ª–∏—Ç–µ üé™.")
            return

        records = database.get_recent_market(resource, minutes=15)
        if len(records) < 2:
            bot.reply_to(message, f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {resource}.")
            return

        current_raw_buy = latest['buy']
        user_id = message.from_user.id
        current_buy_adj, _ = users.adjust_prices_for_user(user_id, current_raw_buy, latest['sell'])
        bonus = users.get_user_bonus(user_id)
        # Fixed: direction based on target vs current
        if target_price < current_buy_adj:
            direction = "down"
        else:
            direction = "up"

        speed_raw = calculate_speed(records, "buy")
        if speed_raw is None:
            bot.reply_to(message, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å.")
            return

        adj_speed = speed_raw / (1 + bonus) if isinstance(bonus, float) else speed_raw
        if adj_speed == 0:
            bot.reply_to(message, "‚ö†Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞.")
            return

        # Fixed check: ensure target in logical direction
        if direction == "down" and target_price >= current_buy_adj:
            bot.reply_to(message, f"‚ö†Ô∏è –î–ª—è –ø–∞–¥–µ–Ω–∏—è —Ü–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π ({current_buy_adj:.2f}üí∞).")
            return
        if direction == "up" and target_price <= current_buy_adj:
            bot.reply_to(message, f"‚ö†Ô∏è –î–ª—è —Ä–æ—Å—Ç–∞ —Ü–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π ({current_buy_adj:.2f}üí∞).")
            return

        trend = get_trend(records, "buy")
        if (direction == "down" and trend == "up") or (direction == "up" and trend == "down"):
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="timer_cancel"))
            markup.add(types.InlineKeyboardButton("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="timer_confirm"))
            bot.reply_to(message, f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ**\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç—Ä–µ–Ω–¥—É ({trend}). –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=markup, parse_mode='Markdown')
            return  # Wait for confirm, but for simplicity, proceed with warning

        if (direction == "down" and adj_speed >= 0) or (direction == "up" and adj_speed <= 0):
            bot.reply_to(message, "‚ö†Ô∏è –¶–µ–Ω–∞ –¥–≤–∏–∂–µ—Ç—Å—è –Ω–µ –≤ –Ω—É–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É. –ê–ª–µ—Ä—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            return

        price_diff = abs(target_price - current_buy_adj)
        time_minutes = price_diff / abs(adj_speed)
        alert_time = datetime.now() + timedelta(minutes=time_minutes)

        chat_id = message.chat.id if message.chat.type in ['group', 'supergroup'] else None

        alert_id = database.insert_alert_record(user_id, resource, target_price, direction, adj_speed, current_buy_adj, alert_time.isoformat(), chat_id)

        alert_time_str = alert_time.strftime("%H:%M:%S")
        username = message.from_user.username or str(message.from_user.id)
        dir_str = "üìâ –ø–∞–¥–µ–Ω–∏–µ" if direction == 'down' else "üìà —Ä–æ—Å—Ç"
        notify = f"‚úÖ **–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!** ‚è±Ô∏è\n"
        notify += f"üë§ @{username}\n"
        notify += f"üì¶ {resource}\n"
        notify += f"üíπ –¢–µ–∫—É—â–∞—è: {current_buy_adj:.2f}üí∞\n"
        notify += f"üéØ –¶–µ–ª—å: {target_price:.2f}üí∞ ({dir_str})\n"
        notify += f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {adj_speed:+.6f}/–º–∏–Ω\n"
        notify += f"‚è≥ ~{int(time_minutes)} –º–∏–Ω\n"
        notify += f"üïê {alert_time_str}"
        sent = bot.reply_to(message, notify, parse_mode='Markdown')

        if chat_id and chat_id != user_id:
            try:
                bot.pin_chat_message(chat_id, sent.message_id, disable_notification=True)
                database.upsert_chat_settings(chat_id, True, database.get_chat_settings(chat_id)["notify_interval"], pinned_message_id=sent.message_id)
            except Exception:
                pass

        threading.Thread(target=schedule_alert, args=(alert_id, bot), daemon=True).start()

    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –≤ cmd_timer_handler")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞.")


def cmd_status_handler(bot, message):
    user_id = message.from_user.id
    alerts_list = database.get_user_active_alerts(user_id)
    if not alerts_list:
        bot.reply_to(message, "üìã **–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤** üîî\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /timer –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return
    reply = "üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã** ‚è±Ô∏è\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    for a in alerts_list:
        time_left = datetime.fromisoformat(a['alert_time']) - datetime.now()
        if time_left.total_seconds() > 0:
            left_min = int(time_left.total_seconds() // 60)
            left_sec = int(time_left.total_seconds() % 60)
            left_str = f"{left_min} –º–∏–Ω {left_sec} —Å–µ–∫"
            time_str = datetime.fromisoformat(a['alert_time']).strftime("%H:%M:%S")
            dir_str = "üìâ –ø–∞–¥–µ–Ω–∏–µ" if a['direction']=='down' else "üìà —Ä–æ—Å—Ç"
            reply += f"‚Ä¢ **{a['resource']}** ‚Üí {a['target_price']:.2f}üí∞ ({dir_str})\n"
            reply += f"  ‚è≥ {left_str} | üïê {time_str}\n\n"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancel_all"))
    bot.reply_to(message, reply, parse_mode='Markdown', reply_markup=markup)


def cmd_cancel_handler(bot, message):
    user_id = message.from_user.id
    count = database.cancel_user_alerts(user_id)
    bot.reply_to(message, f"üóëÔ∏è **–£–¥–∞–ª–µ–Ω–æ {count} –∞–ª–µ—Ä—Ç–æ–≤** üìã")


def cmd_help_handler(bot, message):
    help_text = """
üÜò **BS Market Analytics - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞** ü§ñ

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ & –ê–Ω–∞–ª–∏–∑:**
‚Ä¢ /stat - –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã, —Ç—Ä–µ–Ω–¥—ã, –ø—Ä–æ–≥–Ω–æ–∑—ã (—Å –±–æ–Ω—É—Å–æ–º)
‚Ä¢ /history [—Ä–µ—Å—É—Ä—Å] - –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –∑–∞ 24—á (–î–µ—Ä–µ–≤–æ, –ö–∞–º–µ–Ω—å, –ü—Ä–æ–≤–∏–∑–∏—è, –õ–æ—à–∞–¥–∏)

üîî **–ê–ª–µ—Ä—Ç—ã & –¢–∞–π–º–µ—Ä—ã:**
‚Ä¢ /timer <—Ä–µ—Å—É—Ä—Å> <—Ü–µ–Ω–∞> - –¢–∞–π–º–µ—Ä –Ω–∞ —Ü–µ–Ω—É (up/down)
‚Ä¢ /status - –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ
‚Ä¢ /buyalert <—Ä–µ—Å—É—Ä—Å> <–º–∞–∫—Å_—Ü–µ–Ω–∞> <–º–∏–Ω_–∫–æ–ª> - –ì—Ä—É–ø–ø–æ–≤–æ–π –∞–ª–µ—Ä—Ç –ø–æ–∫—É–ø–∫–∏

üìà **–¢–æ—Ä–≥–æ–≤–ª—è & –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ /top_player - –í–∞—à–∏ —Å–¥–µ–ª–∫–∏, –≤—ã–≥–æ–¥–∞ (24—á)
‚Ä¢ /top_list - –¢–æ–ø-10 –ø–æ –ø—Ä–∏–±—ã–ª–∏
‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ "–¢—ã –∫—É–ø–∏–ª/–ø—Ä–æ–¥–∞–ª" –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ /settings - –ë–æ–Ω—É—Å—ã (—è–∫–æ—Ä—å, —É—Ä–æ–≤–µ–Ω—å)
‚Ä¢ /push - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
‚Ä¢ /clearbuyalerts - –û—á–∏—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã

üé™ **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

–î–ª—è –≥—Ä—É–ø–ø: –ê–≤—Ç–æ-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤.
–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support
    """
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stat"))
    markup.add(types.InlineKeyboardButton("üîî –¢–∞–π–º–µ—Ä—ã", callback_data="menu_alerts"))
    markup.add(types.InlineKeyboardButton("üèÜ –¢–æ–ø", callback_data="menu_top"))
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"))
    bot.reply_to(message, help_text, parse_mode='Markdown', reply_markup=markup)
